package main

import (
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/Rhymen/go-whatsapp"
	_frontendHttpDelivery "github.com/cooljar/go-whatsapp-fiber/frontend/delivery/http"
	"github.com/cooljar/go-whatsapp-fiber/frontend/delivery/http/configs"
	_frontendDeliveryMiddleware "github.com/cooljar/go-whatsapp-fiber/frontend/delivery/http/middleware"
	_frontendUcase "github.com/cooljar/go-whatsapp-fiber/frontend/usecase"
	"github.com/cooljar/go-whatsapp-fiber/utils"
	"github.com/gofiber/fiber/v2"

	// docs are generated by Swag CLI, you have to import them.
	_ "github.com/cooljar/go-whatsapp-fiber/docs" // load API Docs files (Swagger)
)

func init() {
	if os.Getenv("WHATSAPP_CLIENT_NAME_SHORT") == "" {
		os.Setenv("WHATSAPP_CLIENT_NAME_SHORT", "Klik Adzkia Whatsapp")
	}
	if os.Getenv("WHATSAPP_CLIENT_NAME_LONG") == "" {
		os.Setenv("WHATSAPP_CLIENT_NAME_LONG", "Klik Adzkia Whatsapp Rest API")
	}

	if os.Getenv("SERVER_URL") == "" {
		exitf("SERVER_URL env is required")
	}
	if os.Getenv("SERVER_READ_TIMEOUT") == "" {
		exitf("SERVER_READ_TIMEOUT env is required")
	}

	if os.Getenv("JWT_SECRET_KEY") == "" {
		exitf("JWT_SECRET_KEY env is required")
	}
	if os.Getenv("JWT_SECRET_KEY_EXPIRE_MINUTES") == "" {
		exitf("JWT_SECRET_KEY_EXPIRE_MINUTES env is required")
	}

	if os.Getenv("WHATSAPP_CLIENT_VERSION_MAJOR") == "" {
		exitf("WHATSAPP_CLIENT_VERSION_MAJOR env is required")
	}
	if os.Getenv("WHATSAPP_CLIENT_VERSION_MINOR") == "" {
		exitf("WHATSAPP_CLIENT_VERSION_MINOR env is required")
	}
	if os.Getenv("WHATSAPP_CLIENT_VERSION_BUILD") == "" {
		exitf("WHATSAPP_CLIENT_VERSION_BUILD env is required")
	}
	if os.Getenv("WHATSAPP_CLIENT_SESSION_PATH") == "" {
		exitf("WHATSAPP_CLIENT_SESSION_PATH env is required")
	}
}

// @title Klik Adzkia Go Whatsapp Rest API
// @version 1.0
// @description Fiber, Whatsapp and Swagger docs in isolated Docker containers.
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email lifelinejar@mail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @BasePath /api
func main() {
	wac, err := whatsapp.NewConnWithOptions(&whatsapp.Options{
		// timeout
		Timeout: 20 * time.Second,
		//Proxy:   proxy,
		// set custom client name
		ShortClientName: os.Getenv("WHATSAPP_CLIENT_NAME_SHORT"),
		LongClientName:  os.Getenv("WHATSAPP_CLIENT_NAME_LONG"),
	})
	if err != nil {
		exitf("Whatssap connection error: ", err)
	}

	waClientVerMajInt, err := strconv.Atoi(os.Getenv("WHATSAPP_CLIENT_VERSION_MAJOR"))
	if err != nil {
		exitf("Error conversion", err)
	}

	waClientVerMinInt, err := strconv.Atoi(os.Getenv("WHATSAPP_CLIENT_VERSION_MINOR"))
	if err != nil {
		exitf("Error conversion", err)
	}

	waClientVerBuildInt, err := strconv.Atoi(os.Getenv("WHATSAPP_CLIENT_VERSION_BUILD"))
	if err != nil {
		exitf("Error conversion", err)
	}

	wac.SetClientVersion(waClientVerMajInt, waClientVerMinInt, waClientVerBuildInt)

	whatsappUsecae := _frontendUcase.NewWhatsappUsecase(wac)

	//Restore session if exists
	err = whatsappUsecae.RestoreSession()
	if err != nil {
		exitf("Error restoring whatsapp session. ", err)
	}

	// Define Fiber config.
	config := configs.FiberConfig()
	app := fiber.New(config)

	// Swagger handler
	_frontendHttpDelivery.NewSwaggerHandler(app)

	middL := _frontendDeliveryMiddleware.InitMiddleware(app)
	app.Use(middL.CORS())
	app.Use(middL.LOGGER())

	// router for public access
	rPublic := app.Group("/api/v1")

	// router for private access
	rPrivate := app.Group("/api/v1/auth", middL.JWT())

	_frontendHttpDelivery.NewWhatsappHandler(whatsappUsecae, rPublic, rPrivate)

	//_frontendHttpDelivery.NewDebugHandler(rPublic, rPublic)

	utils.StartServer(app)
}

func exitf(s string, args ...interface{}) {
	errorf(s, args...)
	os.Exit(1)
}

func errorf(s string, args ...interface{}) {
	fmt.Fprintf(os.Stderr, s+"\n", args...)
}
